generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// üîê USERS, ROLES, & PERMISSIONS
model User {
  id             Int                  @id @default(autoincrement())
  name           String
  email          String               @unique
  password       String
  phone          String               @unique
  isActive       Boolean              @default(true)
  roleId         Int?
  role           Role?                @relation(fields: [roleId], references: [id])
  auditLogs      AuditLog[]
  postedJournals JournalHeader[]
  ResetToken     ResetPasswordToken[]
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
}

model Role {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  users       User[]
  permissions RolePermission[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model RolePermission {
  id        Int      @id @default(autoincrement())
  roleId    Int
  module    String
  canView   Boolean  @default(false)
  canAdd    Boolean  @default(false)
  canUpdate Boolean  @default(false)
  canDelete Boolean  @default(false)
  canPost   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role Role @relation(fields: [roleId], references: [id])
}

model AuditLog {
  id          Int      @id @default(autoincrement())
  userId      Int
  action      String
  description String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model ResetPasswordToken {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @unique
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}

// üë• CLIENTS, PARTNERS, LOANS, REPAYMENTS
model Client {
  id             Int              @id @default(autoincrement())
  name           String
  email          String?
  phone          String
  telegramChatId String?
  birthDate      DateTime
  address        String
  nationalId     String
  city           String
  district       String
  employer       String
  salary         Float
  obligations    Float
  creationReason String
  debit          Float            @default(0)
  credit         Float            @default(0)
  balance        Float            @default(0)
  status         ClientStatus     @default(ŸÖŸÑÿ™ÿ≤ŸÖ)
  kafeel         Kafeel?          @relation(fields: [kafeelId], references: [id])
  kafeelId       Int?
  documents      ClientDocument[]
  loans          Loan[]
  notes          String?
  createdAt      DateTime         @default(now())
  JournalLine    JournalLine[]
  clientsClosing clientsClosing[]
  Notification   Notification[]
}

model Kafeel {
  id          Int      @id @default(autoincrement())
  name        String
  nationalId  String
  birthDate   DateTime
  city        String
  district    String
  employer    String
  salary      Float
  obligations Float
  phone       String
  email       String?
  client      Client[]
  createdAt   DateTime @default(now())
}

model ClientDocument {
  id             Int      @id @default(autoincrement())
  clientId       Int
  clientIdImage  String
  clientWorkCard String?
  salaryReport   String?
  simaReport     String?
  kafeelIdImage  String?
  kafeelWorkCard String?
  DEBT_ACKNOWLEDGMENT String?
  PROMISSORY_NOTE     String?
  createdAt      DateTime @default(now())

  client Client @relation(fields: [clientId], references: [id])
}

enum ClientStatus {
  ŸÖŸÑÿ™ÿ≤ŸÖ
  ŸÖÿ™ÿ£ÿÆÿ±
  ŸÖÿ™ÿπÿ´ÿ±
}

model Loan {
  id             Int         @id @default(autoincrement())
  code           String
  clientId       Int
  amount         Float
  interestRate   Float
  interestAmount Float
  totalAmount    Float
  durationMonths Int
  type           LoanType
  status         LoanStatus  @default(PENDING)
  startDate      DateTime
  endDate        DateTime?
  repaymentDay   Int?
  repayments     Repayment[]
  Notification   Notification[]
  createdAt      DateTime    @default(now())
  client         Client      @relation(fields: [clientId], references: [id])
  bankAccountId  Int?
  bankAccount    BANK_accounts? @relation(fields: [bankAccountId], references: [id])
  partnerId      Int?
  partner   Partner? @relation(fields: [partnerId], references: [id])
  disbursementJournalId Int?   
  settlementJournalId   Int? 
}

enum LoanType {
  DAILY
  WEEKLY
  MONTHLY
}

enum LoanStatus {
  PENDING
  ACTIVE
  COMPLETED
  DEFAULTED
}

model Repayment {
  id          Int           @id @default(autoincrement())
  loanId      Int
  dueDate     DateTime
  amount      Float
  paidAmount  Float         @default(0)
  status      PaymentStatus @default(PENDING)
  paymentDate DateTime?
  attachments  String?
  reviewStatus String?
  notes        String?  
  postponeApproved  Boolean?   
  postponeReason    String?   
  newDueDate        DateTime?
  createdAt    DateTime      @default(now())
  loan         Loan          @relation(fields: [loanId], references: [id])
  Notification Notification[]
}

model Notification {
  id        Int      @id @default(autoincrement())
  title     String
  message   String
  type      NotificationType
  clientId  Int?
  loanId    Int?
  repaymentId Int?
  channel   String?
  sentAt    DateTime?
  createdAt DateTime @default(now())
  client   Client?   @relation(fields: [clientId], references: [id])
  loan     Loan?     @relation(fields: [loanId], references: [id])
  repayment Repayment? @relation(fields: [repaymentId], references: [id])
}

enum NotificationType {
  LOAN_REMINDER
  REPAYMENT_DUE
  REPAYMENT_LATE
  PAYMENT_APPROVED
  PAYMENT_REJECTED
  GENERAL
}

enum PaymentStatus {
  PENDING
  PENDING_REVIEW
  PAID
  OVERDUE
}

model Partner {
  id               Int       @id @default(autoincrement())
  name             String
  nationalId       String
  address          String
  phone            String?
  email            String?
  orgProfitPercent Float
  capitalAmount    Float
  contractSignedAt DateTime?
  mudarabahFileUrl String?
  isActive         Boolean   @default(true)
  accountPayableId Int       @unique
  accountEquityId  Int       @unique

  AccountPayable Account @relation(name: "account_payable", references: [id], fields: [accountPayableId])
  AccountEquity  Account @relation(name: "account_equity", references: [id], fields: [accountEquityId])
  loans Loan[]

  createdAt DateTime @default(now())
}

enum TransactionType {
  DEPOSIT
  WITHDRAWAL
}

model BANK_accounts {
  id             Int       @id @default(autoincrement())
  name           String
  accountNumber  String
  IBAN           String
  limit          Int
  status         AccountStatus @default(Active)
  loans          Loan[]
}

enum AccountStatus {
  Active
  Expired
}

// üí∞ ACCOUNTING CORE
model Account {
  id               Int               @id @default(autoincrement())
  name             String
  code             String            @unique
  parentId         Int?
  type             AccountType
  level            Int               @default(1)
  isActive         Boolean           @default(true)
  credit           Float             @default(0)
  debit            Float             @default(0)
  balance          Float             @default(0)
  nature           AccountNature     @default(DEBIT)
  accountBasicType AccountBasicType
  parent           Account?          @relation("AccountHierarchy", fields: [parentId], references: [id])
  children         Account[]         @relation("AccountHierarchy")
  entries          JournalLine[]
  createdAt        DateTime          @default(now())
  partnerPayable   Partner?          @relation("account_payable")
  partnerEquity    Partner?          @relation("account_equity")
  accountsClosing  accountsClosing[]

  @@index([accountBasicType, code])
}

enum AccountBasicType {
  BANK
  CASH
  LOANS_RECEIVABLE
  PARTNER_PAYABLE
  PARTNER_EQUITY
  LOAN_INCOME
  COMPANY_SHARES
  PARTNER_SHARES_EXPENSES
  OTHER
}

enum AccountNature {
  DEBIT
  CREDIT
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

model PeriodHeader {
  id               Int               @id @default(autoincrement())
  name             String
  startDate        DateTime
  endDate          DateTime
  createdAt        DateTime          @default(now())
  openingJournalId Int?              @unique
  closingJournalId Int?              @unique
  accountsClosing  accountsClosing[]
  clientsClosing   clientsClosing[]
}

model accountsClosing {
  id        Int @id @default(autoincrement())
  accountId Int
  periodId  Int

  openingDebit   Float    @default(0)
  openingCredit  Float    @default(0)
  openingBalance Float    @default(0)
  closingDebit   Float    @default(0)
  closingCredit  Float    @default(0)
  closingBalance Float    @default(0)
  lastUpdated    DateTime @default(now())

  account Account      @relation(fields: [accountId], references: [id])
  period  PeriodHeader @relation(fields: [periodId], references: [id])
}

model clientsClosing {
  id             Int      @id @default(autoincrement())
  clientId       Int
  periodId       Int
  openingDebit   Float    @default(0)
  openingCredit  Float    @default(0)
  openingBalance Float    @default(0)
  closingDebit   Float    @default(0)
  closingCredit  Float    @default(0)
  closingBalance Float    @default(0)
  lastUpdated    DateTime @default(now())

  period PeriodHeader @relation(fields: [periodId], references: [id])
  client Client       @relation(fields: [clientId], references: [id])
}

model JournalHeader {
  id          Int           @id @default(autoincrement())
  reference   String?       @unique
  description String?
  date        DateTime      @default(now())
  type        JournalType   @default(GENERAL)
  status      JournalStatus @default(DRAFT)
  sourceId    Int?
  sourceType  JournalSourceType?
  postedById  Int?
  postedBy    User?         @relation(fields: [postedById], references: [id])
  lines       JournalLine[]
  periodId    Int?
  createdAt   DateTime      @default(now())
}

model JournalLine {
  id        Int   @id @default(autoincrement())
  journalId Int
  accountId Int
  debit     Float @default(0)
  credit    Float @default(0)
  balance   Float @default(0)
  clientId  Int?

  description String?
  client      Client?       @relation(fields: [clientId], references: [id])
  journal     JournalHeader @relation(fields: [journalId], references: [id])
  account     Account       @relation(fields: [accountId], references: [id])
}

enum JournalType {
  GENERAL
  OPENING
  CLOSING
  ADJUSTMENT
}

enum JournalSourceType {
  LOAN
  REPAYMENT
  PARTNER
  PERIOD_CLOSING
  OTHER
}

enum JournalStatus {
  DRAFT
  POSTED
  CANCELLED
}

model Template {
  id          Int          @id @default(autoincrement())
  name        TemplateType @unique
  description String?
  content     String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

enum TemplateType {
  MUDARABAH
  PROMISSORY_NOTE
  DEBT_ACKNOWLEDGMENT
  RECEIPT_VOUCHER
  PAYMENT_VOUCHER
  REPAYMENT_DUE
  REPAYMENT_LATE
  PAYMENT_APPROVED
  PAYMENT_REJECTED
  GENERAL_NOTIFICATION
}
